?primary_keys
?sqlFetch
# Execute the query
primary_keys <- sqlQuery(conold, 'SELECT * FROM MSysRelationships WHERE Primary=TRUE')
primary_keys
# Execute the query
primary_keys <- sqlQuery(conold, 'SELECT * FROM MAREE WHERE Primary=TRUE')
primary_keys
?sqlQuery
# Execute the query
primary_keys <- sqlQuery(conold, 'SELECT * FROM MSysRelationships')
primary_keys
odbcCloseAll()
require(readxl)
?read_excel
fileold='R:/BDA/2023/AVDTH/atot23 v35_91v5.mdb'
conold=odbcConnectAccess2007(fileold)
#No puedo leer directamente la tabla del sistema en access, por lo que entro y la exporto
#Hay que entrar en access y en opciones y permitir visualizarla
primary_keys <- sqlQuery(conold, 'SELECT * FROM MSysRelationships')
primary_keys
primerykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primerykeys
primerykeys=data.frame(primerykeys)
primerykeys
primerykeys[!duplicated(paste(primerykeys$szReferencedColumn,primerykeys$szReferencedObject)),c('szReferencedColumn','szReferencedObject')]
tables=sqlTables(conold)
tables
tables=tables$TABLE_NAME[tables$TABLE_TYPE=='TABLE']
res=NULL
tables=sqlTables(conold)
tables=tables$TABLE_NAME[tables$TABLE_TYPE=='TABLE']
table
tables=sqlTables(conold)
tables
tables=tables$TABLE_NAME[tables$TABLE_TYPE=='TABLE']
tables
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
head(odbcCloseAll()
)
head(primarykeys)
tables
tbl=tables[1]
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys
tbl
sort(unique(primarykeys$szReferencedObject))
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
unique(primarykeys$szReferencedColumn         )
unique(primarykeys$szReferencedObject)
sort(unique(primarykeys$szReferencedObject))
tbl="BATEAU"
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys
unique(primarykeys$szReferencedObject)
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys
jnk=sqlQuery(con,paste('SELECT * FROM ',tbl))
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
conold=odbcConnectAccess2007(fileold)
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
head(jnk)
p_keys
jnk[,p_keys]
p_keys
p_keys=p_keys[!duplicated(p_keys)]
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
jnk=jnk[,p_keys]
jnk
head(jnk)
jnk=jnk[duplicated(jnk),]
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
jnk=data.frame(jnk[,p_keys])
jnk=jnk[duplicated(jnk),]
head(jnk)
nrow(jnk)>0
kk=data.frame(barco=c(1960),fecha='A')
kk
kk=data.frame(barco=c(1960,1961),fecha=c('A','B'))
kk
jnk=which(duplicated(jnk))
jnk
jnk=paste(jnk,collapse=";")
jnk
length(jnk)>0
jnk
nchar(jnk)>0
res=NULL
for (tbl in unique(primarykeys$szReferencedObject)){
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys=p_keys[!duplicated(p_keys)]
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
jnk=data.frame(jnk[,p_keys])
jnk=which(duplicated(jnk))
jnk=paste(jnk,collapse=";")
if (nchar(jnk)>0){res=rbind(res,data.frame(table=tbl,duplicates=jnk))}
}
tbl
head(primarykeys)
primerykeys=primerykeys[!duplicated(paste(primerykeys$szReferencedColumn,primerykeys$szReferencedObject)),c('szReferencedColumn','szReferencedObject')]
tables=sqlTables(conold)
tables=tables$TABLE_NAME[tables$TABLE_TYPE=='TABLE']
tables
tables=unique(primarykeys$szReferencedObject))[unique(primarykeys$szReferencedObject)) %in% tables]
tables=unique(primarykeys$szReferencedObject)[unique(primarykeys$szReferencedObject) %in% tables]
tables
# tables
res=NULL
for (tbl in tables){
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys=p_keys[!duplicated(p_keys)]
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
jnk=data.frame(jnk[,p_keys])
jnk=which(duplicated(jnk))
jnk=paste(jnk,collapse=";")
if (nchar(jnk)>0){res=rbind(res,data.frame(table=tbl,duplicates=jnk))}
}
res
tables
tbl="ACTIVITE"
p_keys=primarykeys$szReferencedColumn[primarykeys$szReferencedObject==tbl]
p_keys
p_keys=p_keys[!duplicated(p_keys)]
p_keys
jnk=sqlQuery(conold,paste('SELECT * FROM ',tbl))
jnk=data.frame(jnk[,p_keys])
HEAD(JNK)
head(jnk)
jnk=which(duplicated(jnk))
jnk
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeyshead(primarykeys)
head(primarykeys)
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primarykeys)
primarykeys
primarykeys=primarykeys[!duplicated(paste(primarykeys$szReferencedColumn,primarykeys$szReferencedObject)),c('szColumn','szObject')]
sqlQuery(conold,"SHOW CREATE TABLE ACT_ASSOC");
sqlQuery(conold,"show index from ACT_ASSOC where Key_name = 'PRIMARY' ;")
sqlQuery(conold,"SELECT index from ACT_ASSOC where Key_name = 'PRIMARY' ;")
sqlQuery(conold,"SELECT index from ACT_ASSOC where Key_name = 'PRIMARY' ;")
sqlQuery(conold,"SELECT index from ACT_ASSOC where Key_name = 'PRIMARY' ;")
primarykeys<-read_excel('P:/Pacifico/Rwork/Rprojects/avdth/MSysRelationships.xlsx')
primarykeys=data.frame(primerykeys)
primarykeys
primerykeys=primerykeys[!duplicated(paste(primerykeys$szReferencedColumn,primerykeys$szReferencedObject)),c('szReferencedColumn','szReferencedObject')]
primerykeys
primerykeys[order(primerykeys$szReferencedObject),]
test=data.frame(table=c('ACT_ASSOC'),fields=c('C_BAT,D_DBQ,D_ACT,N_ACT,N_ASSOC,C_ASSOC'))
test
kk=sqlQuery(conold,'SELECT * FROM ACT_ASSOC')
head(kk)
test$fields
kk[,test$fields]
head(test$fields)
strsplit(test$fields,split=',')
unlist(strsplit(test$fields,split=','))
kk[,unlist(strsplit(test$fields,split=','))]
#Hago a mano algunas, que no consigo sacar los primary keys de todas las tablas...
checkdups=data.frame(table=c('ACT_ASSOC','ACTIVITE','CAPT_ELEM','MAREE'),fields=c('C_BAT,D_DBQ,D_ACT,N_ACT,N_ASSOC','C_BAT,D_DBQ,D_ACT,N_ACT','C_BAT,D_DBQ,D_ACT,N_ACT,N_CAPT','C_BAT,D_DBQ'))
i=1
jnk=sqlQuery(conold,paste('SELECT * FROM ',checkdups$table[i]))
head(jnk)
head(jnk[,unlist(strsplit(checkdups$fields[i],split=','))])
which(duplicated(jnk[,unlist(strsplit(checkdups$fields[i],split=','))]))
res=NULL
for (i in 1:nrow(checkdups)){
jnk=sqlQuery(conold,paste('SELECT * FROM ',checkdups$table[i]))
jnk=which(duplicated(jnk[,unlist(strsplit(checkdups$fields[i],split=','))]))
jnk=paste(jnk,collapse=";")
if (nchar(jnk)>0){res=rbind(res,data.frame(table=checkdups$table[i],duplicates=jnk))}
}
res
devtools::install_github('curroabascal/eezareas',ref='master',force=T)
require(eezareas)
get.EEZ(londec=c(-18,12.588,13.218,NA,NA,16,NA,-15,5,0,-42,-21,-18.3,-24.6,-18,-178),
latdec=c(22,-11.2237,-22.99078,NA,NA,-85,NA,-22,-40,-13,15,-15,45,-30,28,-9),type='territory')
get.EEZ(londec=c(-18,12.588,13.218,NA,NA,16,NA,-15,5,0,-42,-21,-18.3,-24.6,-18,-178,181.5),
latdec=c(22,-11.2237,-22.99078,NA,NA,-85,NA,-22,-40,-13,15,-15,45,-30,28,-9,-9.1),type='territory')
londec=c(-18,12.588,13.218,NA,NA,16,NA,-15,5,0,-42,-21,-18.3,-24.6,-18,-178,181.5)
latdec=c(22,-11.2237,-22.99078,NA,NA,-85,NA,-22,-40,-13,15,-15,45,-30,28,-9,-9.1)
type='territory'
require(sf)
# #To remove
# load('P:/Pacifico/Rwork/Rprojects/eezareas/eezareas/data/EEZSpatialPolygons.Rdata')
checkfiles()
eezs=readRDS(system.file("extdata", 'eezs.RDS', package = "eezareas"))
londec[is.na(londec) | is.na(latdec)]<- -999
latdec[is.na(latdec) | is.na(latdec)]<- -999
londec[londec>180 & londec!=-999]=londec[londec>180 & londec!=-999]-360
pnts <- data.frame(x=londec,y=latdec)
pnts_sf <- st_as_sf(pnts, coords = c('x', 'y'),crs=st_crs(eezs))
sf_use_s2(FALSE)
areas=st_intersects(pnts_sf,eezs)
pnts_sf
gridcode=305015
quad=as.numeric(susbtr(gridcode,1,1))
quad=as.numeric(substr(gridcode,1,1))
lat=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
lon=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+1)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+1)
lonmin
lonmax
latmin
latmax
gridcode=c(305015,405015)
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+1)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+1)
lonmin
lonmax
quad
latmin
latmax
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1)})
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lons
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lons
lats
require(iccatareas)
library(hep='iccatareas')
library(help='iccatareas')
?getICCATareas
species=c('SKJ','SKJ')
areas=sapply(1:length(gridcode),function(x){getICCATareas(faocode=species[x],lons[,x],lats[,x])})
class(areas)
head(areas)
lons
length(seq(lonmin[x],lonmax[x],.1*sign(lonmin[x])))
length(seq(lonmin[1],lonmax[1],.1*sign(lonmin[x])))
length(seq(lonmin[1],lonmax[1],.1*sign(lonmin[1])))
lons
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
head(areas)
nrow(areas)
area$recno=rep(1:length(gridcode),each=51)
areas$recno=rep(1:length(gridcode),each=51)
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
head(areas)
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
head(areas)
aggregate(cbind(X1,X2)~recno,data=areas,FUN=length)
aggregate(X1~recno+X1+X2,data=areas,FUN=length)
head(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas
species=c('SAI','SAI')
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
require(data.table)
areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas
quad
latmin
latmax
lonmin
lonmax
lats
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas
gridcode=c(305025,405025)
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
require(data.table)
areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas),]
fromgrid5x5<-function(gridcode,species){
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
# require(data.table)
# areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas=statareas[order(statareas$X2,decreasing=T),]
statareas=statareas[!duplicated(statareas),]
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas),]
return(cbind(statareas,stockareas))
}
require(r3)
require(rt3)
library(help='rt3')
dat=read.delim('P:/Pacifico/Rwork/Rprojects/rt3/documentacion/doc/ma 312ne.tm5')
head(dat)
?read.delim
dat=read.delim('P:/Pacifico/Rwork/Rprojects/rt3/documentacion/doc/ma 312ne.tm5',sep=' ')
dat=read.delim('P:/Pacifico/Rwork/Rprojects/rt3/documentacion/doc/ma 312ne.tm5',sep=' ',header=F)
head(dat)
dim(dat)
dat[1,]
dat=read.table('P:/Pacifico/Rwork/Rprojects/rt3/documentacion/doc/ma 312ne.tm5',header=F)
head(dat)
table(dat$V3)
fromgrid5x5<-function(gridcode,species){
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
# require(data.table)
# areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas=statareas[order(statareas$X2,decreasing=T),]
statareas=statareas[!duplicated(statareas),]
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas),]
return(cbind(statareas,stockareas))
}
head(dat[,1:10])
fromgrid5x5(dat$V5 ,'SKJ')
dat$V5
gridcode=dat$V5
faocode='SKJ'
species='SKJ'
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lonmin
lonmax
latmin
latmax
cbind(lonmin,lonmax)
fromgrid5x5<-function(gridcode,species){
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmax[x]-lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmax[x]-latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
# require(data.table)
# areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas=statareas[order(statareas$X2,decreasing=T),]
statareas=statareas[!duplicated(statareas),]
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas),]
return(cbind(statareas,stockareas))
}
fromgrid5x5(dat$V5,'SKJ')
fromgrid5x5(dat$V5,rep('SKJ',nrow(dat)))
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmax[x]-lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmax[x]-latmin[x]))})
lons
spcies=rep('SKJ',nrow(dat))
species=rep('SKJ',nrow(dat))
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
# require(data.table)
# areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas=statareas[order(statareas$X2,decreasing=T),]
head(statareas)
statareas=statareas[!duplicated(statareas$recno),]
statareas=statareas[order(statareas$recno),]
head(statareas)
statareas=statareas$X1
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas$recno),]
stockareas=stockareas[order(stockareas$recno),]
head(stockareas)
fromgrid5x5<-function(gridcode,species){
quad=as.numeric(substr(gridcode,1,1))
latmin=ifelse(quad %in% c(1,4),1,-1)*as.numeric(substr(gridcode,2,3))
latmax=ifelse(quad %in% c(1,4),1,-1)*(as.numeric(substr(gridcode,2,3))+5)
lonmin=ifelse(quad %in% c(1,2),1,-1)*as.numeric(substr(gridcode,4,6))
lonmax=ifelse(quad %in% c(1,2),1,-1)*(as.numeric(substr(gridcode,4,6))+5)
lons=sapply(1:length(gridcode),function(x){seq(lonmin[x],lonmax[x],.1*sign(lonmax[x]-lonmin[x]))})
lats=sapply(1:length(gridcode),function(x){seq(latmin[x],latmax[x],.1*sign(latmax[x]-latmin[x]))})
areas=getICCATareas(faocode=rep(species,each=51),as.numeric(lons),as.numeric(lats))
areas=data.frame(areas)
areas$recno=rep(1:length(gridcode),each=51)
# require(data.table)
# areas=data.table(areas)
statareas=aggregate(X2~recno+X1,data=areas,FUN=length)
statareas=statareas[order(statareas$X2,decreasing=T),]
statareas=statareas[!duplicated(statareas$recno),]
statareas=statareas[order(statareas$recno),]
statareas=statareas$X1
stockareas=aggregate(X1~recno+X2,data=areas,FUN=length)
stockareas=stockareas[order(stockareas$X1,decreasing=T),]
stockareas=stockareas[!duplicated(stockareas$recno),]
stockareas=stockareas[order(stockareas$recno),]
stockareas=stockareas$X2
return(cbind(statareas,stockareas))
}
fromgrid5x5(dat$V5,rep('SKJ',nrow(dat)))
res=fromgrid5x5(dat$V5,rep('SKJ',nrow(dat)))
head(res)
class(res)
require(Robserve)
library(help='Robserve')
rm(list=ls())
packages=c('installr','roxygen2','devtools')
sapply(packages,function(x) {if (!x %in% installed.packages()) install.packages(x)})
lapply(packages, require, character.only=T)
#Primero actualizo la version de R y paquetes, para que sea lo mas actualizada posible...
#updateR() #Siguiendo el consejo, lo hago desde Rgui...
setwd("P:/Pacifico/Rwork/Rprojects/myareas")
create('myareas')
getwd()
rm(list=ls())
packages=c('installr','roxygen2','devtools')
sapply(packages,function(x) {if (!x %in% installed.packages()) install.packages(x)})
lapply(packages, require, character.only=T)
#Primero actualizo la version de R y paquetes, para que sea lo mas actualizada posible...
#updateR() #Siguiendo el consejo, lo hago desde Rgui...
setwd("P:/Pacifico/Rwork/Rprojects/myareas")
#Si no...
#Data EEZs
require(sf)
eezs<- st_read("./World_EEZ_v12_20231025/eez_v12.shp")
dir.create('./myareas/inst')
dir.create('./myareas/inst/extdata')
saveRDS(eezs,file='./myareas/inst/extdata/eezs.RDS')
#Data FAO_areas
res=st_read('./FAO_AREAS_NOCOASTLINE/FAO_AREAS_NOCOASTLINE.shp')
saveRDS(res,file='./myareas/data/faoareas.RDS')
#Data ICCAT_areas
speciesandlayers<-read.csv('speciesandlayers.csv',stringsAsFactors = F)
speciesandlayers
#Data ICCAT_areas
speciesandlayers<-read.csv('speciesandlayers.csv',stringsAsFactors = F)
save(speciesandlayers,file='./myareas/data/speciesandlayers.RData')
require(sf)
for (sp in unique(speciesandlayers$Species)){
res=st_read('ICCAT_gis.gpkg',layer=speciesandlayers$sampling_area[match(sp,speciesandlayers$Species)])
saveRDS(res,file=paste0('./myareas/data/',sp,'.RDS'))
}
setwd('./myareas') #Lo hago en esta carpeta, porque elimino algunas funciones,
document()
getwd()
setwd('./myareas') #Lo hago en esta carpeta, porque elimino algunas funciones,
